/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]

def versions = [:]
versions.androidx = "[1,2)"
versions.dagger = "2.15"
versions.junit = "4.12"
versions.espresso = "3.0.1"
versions.mockwebserver = "3.8.1"
versions.apache_commons = "2.5"
versions.mockito = "2.7.19"
versions.mockito_all = "1.10.19"
versions.dexmaker = "2.2.0"
versions.constraint_layout = "1.0.2"
versions.glide = "4.8.0"
versions.timber = "4.5.1"
versions.rxjava2 = "2.1.3"
versions.rx_android = "2.0.1"
versions.atsl_runner = "1.0.1"
versions.atsl_rules = "1.0.1"
versions.hamcrest = "1.3"
versions.kotlin = "1.3.30"
versions.paging = "1.0.1"
versions.navigation = "1.0.0-alpha04"
versions.work = "1.0.0-alpha08"
versions.fastadapter = '3.3.1'

def plugin =[:]
plugin.kotlin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
plugin.google_services = 'com.google.gms:google-services:4.3.0'
plugin.fabric = 'io.fabric.tools:gradle:1.31.0'
plugin.gradle = 'com.android.tools.build:gradle:3.3.0'
//plugin.navigation.safe_args = "android.arch.navigation:navigation-safe-args-gradle-plugin:${versions.androidx}"
deps.plugin = plugin


def retrofit = [:]
retrofit.runtime = 'com.squareup.retrofit2:retrofit:2.6.1'
retrofit.gson = 'com.squareup.retrofit2:converter-gson:2.6.1'
retrofit.mock = 'com.squareup.retrofit2:retrofit-mock:2.6.1'
retrofit.okhttp3 = 'com.squareup.okhttp3:okhttp:4.1.1'
deps.retrofit = retrofit
deps.okhttp_logging_interceptor = 'com.squareup.okhttp3:logging-interceptor:4.1.1'

/*
def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
*/

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
glide.okhttp3 = "com.github.bumptech.glide:okhttp3-integration:${versions.glide}"
deps.glide = glide

def room = [:]
room.runtime = "android.arch.persistence.room:runtime:$versions.androidx"
room.compiler = "android.arch.persistence.room:compiler:$versions.androidx"
room.rxjava2 = "android.arch.persistence.room:rxjava2:$versions.androidx"
room.testing = "android.arch.persistence.room:testing:$versions.androidx"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "android.arch.lifecycle:runtime:$versions.androidx"
lifecycle.extensions = "android.arch.lifecycle:extensions:$versions.androidx"
lifecycle.viewmodel = "android.arch.lifecycle:viewmodel:$versions.androidx"
//lifecycle.java8 = "android.arch.lifecycle:common-java8:$versions.androidx"
lifecycle.compiler = "android.arch.lifecycle:compiler:$versions.androidx"
deps.lifecycle = lifecycle

def arch_core = [:]
arch_core.testing = "android.arch.core:core-testing:$versions.androidx"
deps.arch_core = arch_core

def work = [:]
work.runtime = "android.arch.work:work-runtime:$versions.work"
work.testing = "android.arch.work:work-testing:$versions.work"
work.firebase = "android.arch.work:work-firebase:$versions.work"
work.runtime_ktx = "android.arch.work:work-runtime-ktx:$versions.work"
deps.work = work

def navigation = [:]
navigation.runtime = "android.arch.navigation:navigation-runtime:$versions.androidx"
navigation.runtime_ktx = "android.arch.navigation:navigation-runtime-ktx:$versions.androidx"
navigation.fragment = "android.arch.navigation:navigation-fragment:$versions.androidx"
navigation.fragment_ktx = "android.arch.navigation:navigation-fragment-ktx:$versions.androidx"
navigation.ui = "android.arch.navigation:navigation-ui:$versions.androidx"
navigation.testing_ktx = "android.arch.navigation:navigation-testing-ktx:$versions.androidx"
deps.navigation = navigation

def androidx = [:]
androidx.core = "androidx.core:core-ktx:$versions.androidx"
androidx.fragment = "androidx.fragment:fragment-ktx:$versions.androidx"
androidx.viewpager = "androidx.viewpager:viewpager:$versions.androidx"
androidx.activity = "androidx.appcompat:appcompat:$versions.androidx"
androidx.multidex = "androidx.multidex:multidex:2.0.0"
deps.androidx = androidx

deps.paging = "android.arch.paging:runtime:$versions.androidx"

def fabric = [:]
//fabric.base = "io.fabric.sdk.android:fabric:1.4.3@aar"
fabric.crashlytics = "com.crashlytics.sdk.android:crashlytics:2.10.1"
deps.fabric = fabric

def fastadapter = [:]
fastadapter.base = "com.mikepenz:fastadapter:$versions.fastadapter"
fastadapter.commons = "com.mikepenz:fastadapter-commons:$versions.fastadapter"
deps.fastadapter = fastadapter

def firebase = [:]
firebase.core = "com.google.firebase:firebase-core:17.0.1"
firebase.analytics = "com.google.firebase:firebase-analytics:17.0.1"
firebase.perf = "com.google.firebase:firebase-perf:16.2.4"
deps.firebase = firebase

def googlePlayServices = [:]
googlePlayServices.maps = "com.google.android.gms:play-services-maps:16.1.0"
googlePlayServices.location = "com.google.android.gms:play-services-location:16.0.0"
googlePlayServices.instantapps = "com.google.android.gms:play-services-instantapps:16.0.1"
deps.googlePlayServices = googlePlayServices

def facebook = [:]
facebook.base = 'com.facebook.android:facebook-android-sdk:[5,6)'
facebook.core = 'com.facebook.android:facebook-core:[5,6)'
deps.facebook = facebook

deps.material = "com.google.android.material:material:1.0.0-beta01"
deps.materialDialogs = 'com.afollestad.material-dialogs:core:0.9.6.0@aar'
//deps.instantApps = "com.google.android.instantapps:instantapps:1.1.0"
deps.amplitude = 'com.amplitude:android-sdk:2.22.0'
deps.yandexMetrica = 'com.yandex.android:mobmetricalib:3.5.1'
deps.materialdrawer = 'com.mikepenz:materialdrawer:6.1.2@aar'
deps.gson = 'com.google.code.gson:gson:2.8.5'
deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.junit = "junit:junit:$versions.junit"
deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.rx_kotlin = "io.reactivex:rxkotlin:2.3.0"
deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"
deps.installreferrer = "com.android.installreferrer:installreferrer:1.0"
deps.play = "com.google.android.play:core:1.4.0"

ext.deps = deps

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url "https://jitpack.io" }
    handler.maven { url "https://maven.google.com" }
    handler.maven { url "https://plugins.gradle.org/m2/" }
    handler.maven { url "https://maven.fabric.io/public" }
}
ext.addRepos = this.&addRepos